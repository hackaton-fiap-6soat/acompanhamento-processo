name: Deploy Infra and Lambda

on:
  push:
    branches:
      - main
  workflow_dispatch:

env:
  BUCKET_NAME: "lambda-code-acompanhamento-2"
  AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
  AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
  AWS_SESSION_TOKEN: ${{ secrets.AWS_SESSION_TOKEN }}

jobs:
  run_tests:
    runs-on: ubuntu-latest
    steps:
      - name: Check out code
        uses: actions/checkout@v3

      - name: Configurar ambiente e instalar dependências
        run: |
          python -m venv .venv
          source .venv/bin/activate
          pip install -r requirements.txt

      - name: Executar testes com cobertura
        run: |
          source .venv/bin/activate
          pytest --cov=app --cov-report=xml:coverage/coverage.xml --cov-fail-under=80 --cov-config=.coveragerc
        env:
          PYTHONPATH: ${{ github.workspace }}

      - name: Salvar cobertura como artefato
        uses: actions/upload-artifact@v3
        with:
          name: coverage-report
          path: coverage/coverage.xml

  sonar_analysis:
    needs: run_tests
    runs-on: ubuntu-latest
    steps:
      - name: Check out code
        uses: actions/checkout@v3

      - name: Baixar cobertura gerada nos testes
        uses: actions/download-artifact@v3
        with:
          name: coverage-report
          path: ./coverage

      - name: Instalar Sonar Scanner
        run: |
          curl -sSLo sonar-scanner-cli.zip https://binaries.sonarsource.com/Distribution/sonar-scanner-cli/sonar-scanner-cli-5.0.1.3006-linux.zip
          unzip sonar-scanner-cli.zip -d $HOME
          echo "$HOME/sonar-scanner-5.0.1.3006-linux/bin" >> $GITHUB_PATH

      - name: Rodar Sonar Scanner
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        run: |
          sonar-scanner \
            -Dsonar.branch.name=${GITHUB_REF##*/} \


  package:
    needs: sonar_analysis
    runs-on: ubuntu-latest
    steps:
      - name: Check out code
        uses: actions/checkout@v3

      - name: Criar pacotes ZIP
        run: |
          # Verifica se o diretório 'app' existe
          if [ ! -d "app" ]; then
            echo "Diretório 'app/' não encontrado!"
            exit 1
          fi

          # Criar o arquivo .env dentro da pasta 'app'
          echo "AWS_ACCESS_KEY_ID=${{ secrets.AWS_ACCESS_KEY_ID }}" > app/.env
          echo "AWS_SECRET_ACCESS_KEY=${{ secrets.AWS_SECRET_ACCESS_KEY }}" >> app/.env
          echo "AWS_SESSION_TOKEN=${{ secrets.AWS_SESSION_TOKEN }}" >> app/.env
          
          # Verifica se o arquivo 'requirements.txt' existe
          if [ ! -f "requirements.txt" ]; then
            echo "Arquivo 'requirements.txt' não encontrado!"
            exit 1
          fi
          
          mkdir -p build
          pip install -r requirements.txt --platform manylinux2014_x86_64 --python-version 3.10 --target build/ --only-binary=:all:
          cp -r app/ build/
          cd build
          zip -r ../lambda-api.zip .
          zip -r ../lambda-sqs.zip .
          cd ..

      - name: Salvar pacotes ZIP como artefatos
        uses: actions/upload-artifact@v3
        with:
          name: lambda-api.zip
          path: lambda-api.zip

      - name: Salvar pacote SQS ZIP como artefato
        uses: actions/upload-artifact@v3
        with:
          name: lambda-sqs.zip
          path: lambda-sqs.zip

  upload_to_s3:
    needs: package
    runs-on: ubuntu-latest
    steps:
      - name: Check out code
        uses: actions/checkout@v3

      - name: Baixar pacotes ZIP
        uses: actions/download-artifact@v3
        with:
          name: lambda-api.zip
          path: .
        env:
          ACTIONS_STEP_DEBUG: true

      - name: Baixar pacote SQS ZIP
        uses: actions/download-artifact@v3
        with:
          name: lambda-sqs.zip
          path: .
        env:
          ACTIONS_STEP_DEBUG: true

      - name: Verificar arquivos ZIP
        run: |
          ls -l
          if [ ! -f "lambda-api.zip" ]; then
            echo "Arquivo lambda-api.zip não encontrado!"
            exit 1
          fi
          if [ ! -f "lambda-sqs.zip" ]; then
            echo "Arquivo lambda-sqs.zip não encontrado!"
            exit 1
          fi

      - name: Instalar AWS CLI
        run: |
          curl "https://d1vvhvl2y92vvt.cloudfront.net/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
          unzip awscliv2.zip
          sudo ./aws/install --update

      - name: Criar bucket S3 e enviar arquivos ZIP
        run: |
          aws configure set cli_pager ""          
          echo "BUCKET_NAME=$BUCKET_NAME" >> $GITHUB_ENV
          aws s3api create-bucket --bucket $BUCKET_NAME --region us-east-1
          aws s3 cp lambda-api.zip s3://$BUCKET_NAME/lambda-api.zip
          aws s3 cp lambda-sqs.zip s3://$BUCKET_NAME/lambda-sqs.zip
        env:
          AWS_ACCESS_KEY_ID:  ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY:  ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_SESSION_TOKEN:  ${{ secrets.AWS_SESSION_TOKEN }}

  deploy:
    needs: upload_to_s3
    runs-on: ubuntu-latest
    steps:
      - name: Check out code
        uses: actions/checkout@v3

      - name: Install Terraform
        run: |
          wget -O- https://apt.releases.hashicorp.com/gpg | gpg --dearmor | sudo tee /usr/share/keyrings/hashicorp-archive-keyring.gpg
          echo "deb [signed-by=/usr/share/keyrings/hashicorp-archive-keyring.gpg] https://apt.releases.hashicorp.com $(lsb_release -cs) main" | sudo tee /etc/apt/sources.list.d/hashicorp.list
          sudo apt-get update && sudo apt-get install terraform

      - name: Initialize Terraform
        working-directory: ./terraform
        run: terraform init -backend-config="bucket=${BUCKET_NAME}" -backend-config="key=hackaton.tfstate" -backend-config="region=us-east-1"

      - name: Baixar artefatos para o Terraform
        uses: actions/download-artifact@v3
        with:
          name: lambda-api.zip
          path: ./terraform/

      - name: Baixar artefatos para o Terraform
        uses: actions/download-artifact@v3
        with:
          name: lambda-sqs.zip
          path: ./terraform/

      - name: Plan Terraform changes
        working-directory: ./terraform
        run: terraform plan -input=false -out=tfplan

      - name: Apply Terraform changes
        working-directory: ./terraform
        run: terraform apply -input=false -auto-approve tfplan
